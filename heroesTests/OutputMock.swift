///
/// @Generated by Mockolo
///



import Foundation
import Resolver
import UIKit
@testable import heroes


class MarvelApiServiceProtocolMock: MarvelApiServiceProtocol {
    init() { }


    private(set) var getCharactersCallCount = 0
    var getCharactersHandler: ((Int, Int, @escaping (MarvelResponse<[CharacterResponse]>?, BaseUrlApi.ApiError?) -> Void) -> ())?
    func getCharacters(page: Int, elements: Int, completion: @escaping (MarvelResponse<[CharacterResponse]>?, BaseUrlApi.ApiError?) -> Void)  {
        getCharactersCallCount += 1
        if let getCharactersHandler = getCharactersHandler {
            getCharactersHandler(page, elements, completion)
        }
        
    }

    private(set) var getCharacterCallCount = 0
    var getCharacterHandler: ((Int, @escaping (MarvelResponse<[CharacterResponse]>?, BaseUrlApi.ApiError?) -> Void) -> ())?
    func getCharacter(id: Int, completion: @escaping (MarvelResponse<[CharacterResponse]>?, BaseUrlApi.ApiError?) -> Void)  {
        getCharacterCallCount += 1
        if let getCharacterHandler = getCharacterHandler {
            getCharacterHandler(id, completion)
        }
        
    }
}

class CharacterListViewModelProtocolMock: CharacterListViewModelProtocol {
    init() { }
    init(list: [Character] = [Character](), refresh: @escaping () -> Void, isLoading: @escaping (Bool) -> Void) {
        self.list = list
        self._refresh = refresh
        self._isLoading = isLoading
    }


    private(set) var listSetCallCount = 0
    var list: [Character] = [Character]() { didSet { listSetCallCount += 1 } }

    private(set) var refreshSetCallCount = 0
    private var _refresh: (() -> Void)!  { didSet { refreshSetCallCount += 1 } }
    var refresh: () -> Void {
        get { return _refresh }
        set { _refresh = newValue }
    }

    private(set) var isLoadingSetCallCount = 0
    private var _isLoading: ((Bool) -> Void)!  { didSet { isLoadingSetCallCount += 1 } }
    var isLoading: (Bool) -> Void {
        get { return _isLoading }
        set { _isLoading = newValue }
    }

    private(set) var sendCallCount = 0
    var sendHandler: ((CharacterListViewModel.ViewActions) -> ())?
    func send(action: CharacterListViewModel.ViewActions)  {
        sendCallCount += 1
        if let sendHandler = sendHandler {
            sendHandler(action)
        }
        
    }
}

class GetCharacterInteractorProtocolMock: GetCharacterInteractorProtocol {
    init() { }


    private(set) var executeCallCount = 0
    var executeHandler: ((Int, @escaping (Character?, BaseUrlApi.ApiError?) -> Void) -> ())?
    func execute(id: Int, completion: @escaping (Character?, BaseUrlApi.ApiError?) -> Void)  {
        executeCallCount += 1
        if let executeHandler = executeHandler {
            executeHandler(id, completion)
        }
        
    }
}

class GetCharactersInteractorProtocolMock: GetCharactersInteractorProtocol {
    init() { }


    private(set) var executeCallCount = 0
    var executeHandler: ((Int, Int, @escaping ([Character]?, BaseUrlApi.ApiError?) -> Void) -> ())?
    func execute(page: Int, elements: Int, completion: @escaping ([Character]?, BaseUrlApi.ApiError?) -> Void)  {
        executeCallCount += 1
        if let executeHandler = executeHandler {
            executeHandler(page, elements, completion)
        }
        
    }
}

class CharacterDetailViewModelProtocolMock: CharacterDetailViewModelProtocol {
    init() { }
    init(character: Character? = nil, refresh: @escaping () -> Void, isLoading: @escaping (Bool) -> Void) {
        self.character = character
        self._refresh = refresh
        self._isLoading = isLoading
    }


    private(set) var characterSetCallCount = 0
    var character: Character? = nil { didSet { characterSetCallCount += 1 } }

    private(set) var refreshSetCallCount = 0
    private var _refresh: (() -> Void)!  { didSet { refreshSetCallCount += 1 } }
    var refresh: () -> Void {
        get { return _refresh }
        set { _refresh = newValue }
    }

    private(set) var isLoadingSetCallCount = 0
    private var _isLoading: ((Bool) -> Void)!  { didSet { isLoadingSetCallCount += 1 } }
    var isLoading: (Bool) -> Void {
        get { return _isLoading }
        set { _isLoading = newValue }
    }

    private(set) var sendCallCount = 0
    var sendHandler: ((CharacterDetailViewModel.ViewActions) -> ())?
    func send(action: CharacterDetailViewModel.ViewActions)  {
        sendCallCount += 1
        if let sendHandler = sendHandler {
            sendHandler(action)
        }
        
    }
}

class MarvelCharactersDatasourceProtocolMock: MarvelCharactersDatasourceProtocol {
    init() { }


    private(set) var getCharactersCallCount = 0
    var getCharactersHandler: ((Int, Int, @escaping ([CharacterModel]?, BaseUrlApi.ApiError?) -> Void) -> ())?
    func getCharacters(page: Int, elements: Int, completion: @escaping ([CharacterModel]?, BaseUrlApi.ApiError?) -> Void)  {
        getCharactersCallCount += 1
        if let getCharactersHandler = getCharactersHandler {
            getCharactersHandler(page, elements, completion)
        }
        
    }

    private(set) var getCharacterCallCount = 0
    var getCharacterHandler: ((Int, @escaping (CharacterModel?, BaseUrlApi.ApiError?) -> Void) -> ())?
    func getCharacter(id: Int, completion: @escaping (CharacterModel?, BaseUrlApi.ApiError?) -> Void)  {
        getCharacterCallCount += 1
        if let getCharacterHandler = getCharacterHandler {
            getCharacterHandler(id, completion)
        }
        
    }
}

